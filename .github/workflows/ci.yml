name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test (Unix)
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    strategy:
      fail-fast: false  # Don't cancel other jobs if one fails
      matrix:
        os: [ubuntu-latest, macos-latest]
        go-version: [1.23, 1.24]

    steps:
    - name: Check out code
      uses: actions/checkout@v5

    - name: Configure Git for consistent line endings
      run: |
        git config --global core.autocrlf false
        git config --global core.eol lf

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: ${{ matrix.go-version }}
        cache: false  # We handle caching manually for better control

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}-v2
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-
          ${{ runner.os }}-go-

    - name: Verify Go installation
      run: go version

    - name: Download dependencies
      run: make deps

    - name: Check code formatting
      run: make fmt-check

    - name: Run tests with race detector
      run: make test-ci

    - name: Check coverage threshold
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.24'
      run: |
        # Extract coverage percentage
        if [ -f coverage.out ]; then
          COVERAGE=$(go tool cover -func=coverage.out | tail -1 | awk '{print $3}' | sed 's/%//')
          echo "Coverage: ${COVERAGE}%"
          if (( $(echo "${COVERAGE} < 70" | bc -l) )); then
            echo "❌ Coverage ${COVERAGE}% is below 70% threshold"
            exit 1
          else
            echo "✅ Coverage ${COVERAGE}% meets quality gate"
          fi
        else
          echo "⚠️ Coverage file not found, skipping coverage check"
        fi

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.24'
      uses: codecov/codecov-action@v5
      with:
        files: ./coverage.out

  test-windows:
    name: Test (Windows - Experimental)
    runs-on: windows-latest
    timeout-minutes: 15
    continue-on-error: true  # Don't fail the workflow if Windows tests fail
    strategy:
      fail-fast: false
      matrix:
        go-version: [1.23, 1.24]

    steps:
    - name: Check out code
      uses: actions/checkout@v5

    - name: Configure Git for consistent line endings
      run: |
        git config --global core.autocrlf false
        git config --global core.eol lf

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: ${{ matrix.go-version }}
        cache: false  # We handle caching manually for better control

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~\AppData\Local\go-build
          ~\go\pkg\mod
        key: windows-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}-v2
        restore-keys: |
          windows-go-${{ matrix.go-version }}-
          windows-go-

    - name: Verify Go installation
      run: go version

    - name: Download dependencies
      run: make deps

    - name: Normalize line endings and check formatting
      shell: pwsh
      run: |
        # Ensure consistent line endings on Windows
        git ls-files "*.go" | ForEach-Object { 
          $content = Get-Content $_ -Raw
          if ($content) {
            $content.Replace("`r`n", "`n") | Set-Content $_ -NoNewline
          }
        }
        make fmt-check

    - name: Run tests (Windows - no race detector)
      continue-on-error: true  # Continue even if tests fail
      run: make test-verbose

  lint:
    name: Lint
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - name: Check out code
      uses: actions/checkout@v5

    - name: Configure Git for consistent line endings
      run: |
        git config --global core.autocrlf false
        git config --global core.eol lf

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: 1.24
        cache: false

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - name: Check out code
      uses: actions/checkout@v5

    - name: Configure Git for consistent line endings
      run: |
        git config --global core.autocrlf false
        git config --global core.eol lf

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: 1.24
        cache: false

    - name: Run gosec security scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-no-fail -fmt sarif -out gosec-report.sarif ./...'

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gosec-report.sarif

  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [test, lint, security]  # Note: test-windows is not required for build to proceed
    steps:
    - name: Check out code
      uses: actions/checkout@v5

    - name: Configure Git for consistent line endings
      run: |
        git config --global core.autocrlf false
        git config --global core.eol lf

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: 1.24
        cache: false

    - name: Build for multiple platforms
      run: make build-all

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries
        path: bin/*
